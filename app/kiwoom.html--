<!DOCTYPE html>
<HTML lang="ko">
<!--  
  VB: http://211.47.160.52:5001/ieframe2.html?userid=2117250&phone=63620
  VB: http://211.47.160.52:5001/ieframe2.html?userid=2117250&phone=63620&initMode=Rest&override=true  
  PB: http://211.47.160.52:5001/ieframe2.html?userid=2117250&phone=63620&isPB=1&initMode=Rest&override=true&autoAns=true
  
  ** IPCC와 통신은 Flash WebSocket 사용.
  ** js2vb Element: CS로 이벤트 전달할때(onchange)
     단, isPB=1 이면 js2vb 전달할때 titlechange event 사용!
  ** vb2js Element: CS에서 이벤트 받을때(onchange)
-->

<HEAD>
  <meta charset="utf-8">
  <title>TeleStar Agent App</title>
  
  <!--link rel="stylesheet" href="reset.min.css"-->
  
  <style>
    body {
      font-family: '맑은 고딕', Tahoma, Geneva, sans-serif;
    }
    button{
      width: 110px;
      margin: 4px 4px 4px 4px;
    }
    div {
      display: inline;
    }
    .log-outer {
      position:absolute;
      bottom:0;
      height:176px;
      width:100%;
      left:0;
      right:0;
      background-color:gray;
      border:1px solid #666;
    }
    #logDiv{
      position:absolute;
      bottom:0;
      height:150px;
      width:99%;
      background-color:#bbb;
      overflow-y:scroll;
      font-size:11px;
      margin-left:5px;
      margin-bottom:5px;
    } 
  </style>
  
  <script> 
    if(typeof console==="undefined" || typeof console.log==="undefined"){
      console = {
        log: function(){
          return;
        } 
      };
    }
  </script>
  
  <link rel="stylesheet" href="../css/photon.min.css">
  <script src="js/menu.js" charset="utf-8"></script>
  
  <!--script src="https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.0.6/bluebird.min.js"></script--> 
  <script src="lib/bluebird.min.js"></script> 
  <script type="text/javascript" src="iefix.js"></script>
   
  <!--[if lte IE 9 ]>
  <!--[if lt IE 9]>
    <script type="text/javascript" src="https://getfirebug.com/firebug-lite.js#startOpened"></script>
    <script type="text/javascript" src="customEvent.js"></script>
          
    <script type="text/javascript" src="wsf/swfobject.js"></script>
    <script type="text/javascript" src="wsf/web_socket.js"></script>  
    <script type="text/javascript">
      // Let the library know where WebSocketMain.swf is:
      WEB_SOCKET_SWF_LOCATION = "wsf/WebSocketMain.swf";    
      console.log('IE9 or Under');
    </script>
    
    <script src="wsfCapi.js"></script> 
    
  <![endif]-->
  
  <!-- For all IE greater than 9 OR all non-IE browsers -->
  <!-- Conditional comment isn't supported starting form IE 10 -->
  <!--[if (gt IE 9)|!(IE)]><!-->
    <script type="text/javascript" src="customEvent.js"></script>
    <script src="wsCapi.js"></script>
  <!--<![endif]-->
  

  <script>
    /*********************************************************
      Utility Functions
    **********************************************************/
    var logDiv = null;
    var hangupCalls = [];
    function wLog(){
        return;
      var msg = '';
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if(typeof arg === 'object'){
          msg = msg + '<br> >>Object>> ' + JSON.stringify(arg) +'<br>';
        }else{
          msg = msg + arg;
        }
      }
      if(!logDiv){
        var tag = document.createElement("div");
        tag.className = 'log-outer'
        tag.innerHTML = "<button style='position:absolute;top:0;right:0;z-index:10' "+
          "onclick=\"document.getElementById('logDiv').innerHTML=''\">로그삭제</button>"+
          "<div id='logDiv'>Started..</div>";
        document.body.appendChild(tag);
        logDiv = document.getElementById('logDiv');
      }
      var tm = (new Date()).toLocaleTimeString();
      logDiv.innerHTML = logDiv.innerHTML + '<br/>[' + tm + '] '+ msg;
      logDiv.scrollTop += 50;
    }
    function EE(fnName){
      wLog('================== ' + fnName + ' =================');
      eval(fnName +'()');
    }
    function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        exdays = exdays || 365;
        d.setTime(d.getTime() + (exdays*24*60*60*1000));
        var expires = "expires="+d.toUTCString();
        document.cookie = cname + "=" + cvalue + "; " + expires;
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for(var i=0; i<ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1);
            if (c.indexOf(name) != -1) return c.substring(name.length,c.length);
        }
        return "";
    }
    var QueryString = (function () {
      // This function is anonymous, is executed immediately and 
      // the return value is assigned to QueryString!
      var query_string = {};
      var query = window.location.search.substring(1);
          var host = window.location.host.split(":")[0];

      var vars = query.split("&");
          vars.push("serverIp="+host);
      for (var i=0;i<vars.length;i++) {
        var pair = vars[i].split("=");
        if (typeof query_string[pair[0]] === "undefined") {
          query_string[pair[0]] = pair[1];
        } else if (typeof query_string[pair[0]] === "string") {
          var arr = [ query_string[pair[0]], pair[1] ];
          query_string[pair[0]] = arr;
        } else {
          query_string[pair[0]].push(pair[1]);
        }
      } 
       return query_string;
    })();
  </script>


  <script>
    /*********************************************************
      initialize
    **********************************************************/
    function queueDivInit(capi){
      var queues = capi.getUserQueues();
      console.log(queues);
    }
        
    CAPI = null;
    
    function WindowLoad()
    {    
      var res = initSocket();
      var btns = document.getElementsByTagName('button');
      for(var i=0; i<btns.length; i++){ btns[i].disabled = true; }
      setTimeout("initButtons()",2000);
      var userid = 'user1000';
      var phone = '1000';
      if(QueryString.userid){
        userid = QueryString.userid;
        document.getElementById('userid').innerText = userid;
      }
      if(QueryString.phone){
        phone = QueryString.phone;
        document.getElementById('phone').innerText = phone;
      }
      if(QueryString.autoAns==='true'){
        document.getElementById('auto-answer').checked = true;
      }
      try{
        if(res){ 
          CAPI = new initCAPI(sock, {
            jv: document.getElementById('js2vb'),
            vj: document.getElementById('vb2js'),
            isPB: ((QueryString.isPB) ? true: false),
            server : QueryString.serverIp,
            port   : sockPort,
            phone  : phone,
            userid : userid,
            onState: stateChangeCallback,
            optInbIdleMode  :'NotReady',   //인바운드콜 종료 후 Idle 모드: NotReady, Inbound, Outbound, 
            optOubIdleMode  :'Outbound',   //아웃바운드콜 종료 후 Idle 모드: NotReady, Inbound, Outbound, 
            optPostNotReadyMode:'Inbound', //NotReady 종료 후 Idle 모드: Inbound, Outbound, 
            optAllowTxRingMode :'Inbound'  //Idle       : Login여부에 무관하게 Idle 상태이면 아무때나 호전환받음.
                                           //Inbound    : Inbound mode & Idle state 에서만 받음.(default)
                                           //InOutBound : Inbound 또는 Outbound mode & Idle state 에서만 받음.
                                           //AnyLogin   : 로그인한 상태이고 Idle state 이면 mode에 상관없이 받음.
                                           //Never      : 절대안받음.        
          });
          if(CAPI){
            //TODO: enable login button..
            document.body.style.backgroundColor = 'rgb(200, 200, 100)';
          }else{
            document.body.style.backgroundColor = 'rgb(100, 0, 0)';
          }
        }else{
          //TODO: disable button..
          document.body.style.backgroundColor = 'rgb(100, 0, 0)';
        }
      }catch(e){
        alert('[ERROR]WindowLoad:: '+e.message);
      }
    }
    
    function WindowClose() {
      if(CAPI && CAPI.mode!=='Logout'){
        CAPI.logout();
      }
    }
    
    function changeAgent(){
      var i = document.getElementById('userid');
      var usr = prompt("변경할 상담원ID를 입력하세요.", i.innerText);
      if (usr == null) {
         return;
      }else{
        i.innerText = usr;
        CAPI.userid = usr;
      }       
    }
    
    function changePhone(){
      var i = document.getElementById('phone');
      var pp = prompt("변경할 전화기ID를 입력하세요.", i.innerText);
      if (pp == null) {
         return;
      }else{
        i.innerText = pp;
        CAPI.phone = pp;
      }       
    }

    /*********************************************************
      Button Handlers
    **********************************************************/
    var cBtns = {
      Dial      : null,
      Hangup    : null,
      Answer    : null, 
      Hijack    : null,
      Transfer  : null,
      TxComplete: null,
      TxCancel  : null,
      Tx3Connect: null,
      IvrSsn    : null,
      IvrAcc    : null,
      IvrRet    : null
    };
    var mBtns = {
      Login     : null,
      Logout    : null,
            NotReady  : null,
      Inbound   : null,
      Outbound  : null,
      Hold      : null,
      Away      : null,
      Rest      : null,
      Lunch     : null,
      Meeting   : null,
      Seminar   : null,
      Etc       : null,
      GetState  : null
    };
    var qBtns = {
      QueueAdd  : null,
      QueueSub  : null,
      QueueRun  : null,
      QueuePause: null,
      QueueState: null
    };
    function initButtons(){
      Object.keys(cBtns).forEach(function(k){
        cBtns[k] = document.getElementById(k);
        cBtns[k].disabled = true;
      });
      Object.keys(mBtns).forEach(function(k){
        mBtns[k] = document.getElementById(k);
        mBtns[k].disabled = (k!=='Login');
      });      
      Object.keys(qBtns).forEach(function(k){
        qBtns[k] = document.getElementById(k);
        qBtns[k].disabled = false;
      });      
    }
    function disableCallButtonsEx(ids,disabled){
      //ids: null   --> apply all
      //     string --> one id or comma separated string
      //     array  --> several id's
      //disabled: true  --> disable
      //          false --> enable
      var applyIds = []; 
      if(ids===null){
        applyIds = Object.keys(cBtns);
      }else if(typeof ids==='string'){
        applyIds = ids.split(',');
      }else{
        applyIds = ids;
      }
      Object.keys(cBtns).forEach(function(k){
        if(applyIds.indexOf(k) >= 0){
          cBtns[k].disabled = disabled;
        }else{
          cBtns[k].disabled = !disabled;
        }
      });      
    }  
    function disableModeButtonsEx(ids,disabled){
      //ids: null   --> apply all
      //     string --> one id or comma separated string
      //     array  --> several id's
      //disabled: true  --> disable
      //          false --> enable
      var applyIds = []; 
      if(ids===null){
        applyIds = Object.keys(mBtns);
      }else if(typeof ids==='string'){
        applyIds = ids.split(',');
      }else{
        applyIds = ids;
      }
      Object.keys(mBtns).forEach(function(k){
        if(applyIds.indexOf(k) >= 0){
          mBtns[k].disabled = disabled;
        }else{
          mBtns[k].disabled = !disabled;
        }
      });      
    }
 
    function getButtonStates(){
      var res = {Mode:CAPI.mode,State:CAPI.state};
      Object.keys(cBtns).forEach(function(k){
        res[k] = (cBtns[k].disabled) ? 0 : 1;
      });
      Object.keys(mBtns).forEach(function(k){
        res[k] = (mBtns[k].disabled) ? 0 : 1;
      });
      return res;
    }
    
    function stateChangeCallback(mode,state,time,call_type,sub){    
      var mm = document.getElementById('mode');
      var ss = document.getElementById('state');
      var tt = document.getElementById('time');
      var cc = document.getElementById('call_type');
      if(mode!==null){
        mm.innerText = mode;
        //var mdb = Ext.getCmp('mode-btn-'+mode);
        //if(mdb) mdb.setPressed();
      }
      if(state!==null) ss.innerText = state; 
      if(time!=null)  tt.innerText = time;
      if(call_type!=null) cc.innerText = call_type;
      //button enable/disable ..
      if(mode==='Error'){
        disableModeButtonsEx(null,true);
        disableCallButtonsEx(null,true);
        //Mapp.mBtns.Login.disable();
        //Ext.getCmp('infoTab').mask();
        CAPI.mode = 'Error';
        CAPI.state = 'Error';
      }else if(mode==='Logout'){
        disableModeButtonsEx('Login',false);
        disableCallButtonsEx(null,true);  
        //Mapp.mBtns.NotReady.setIconCls('icon-flag_red');
        //Mapp.mBtns.NotReady.setText('비대기');        
      }else if(['NotReady','Hold','Away','Rest','Lunch','Meeting','Seminar','Etc'].indexOf(mode) >= 0){
        disableCallButtonsEx(null,true);  
        if(mode!=='Hold'){
          disableModeButtonsEx(['Logout','NotReady',mode],false);
          disableCallButtonsEx('Dial',false); //enable dial where NotReady
        }
        //Mapp.mBtns.NotReady.setIconCls('icon-not_ready');
        //Mapp.mBtns.NotReady.setText('비대기');  
      }else{
        //Mapp.mBtns.NotReady.setIconCls('icon-ready');
        //Mapp.mBtns.NotReady.setText('대기중');
        
        setSession((state==='Connect')?'Init':'None');
              
        switch(state){
          case 'Idle':
            if(mode==='Inbound'){
              disableModeButtonsEx(['Login','Inbound','Hold'],true);
              disableCallButtonsEx(null,true);      
            }else if(mode==='Outbound'){
              disableModeButtonsEx(['Login','Outbound','Hold'],true);
              disableCallButtonsEx('Dial',false);
            }
            //disableModeButtonsEx(['Login','Hold'],true);
            break;
          case 'Ring':
            //Mapp.last_call_type = 'Inbound';
            disableModeButtonsEx(null,true);
            disableCallButtonsEx(['Answer','Hangup'],false);
            //Mapp.Crm.log('인바운드:링:');
            //Mapp.Crm.log('큐:'+Mapp.Crm.queueName); 
            //Mapp.loadCustPanelByAjax({uid:CAPI.uid,chgMode:false});
            //Ext.defer(checkAutoAnswer,500);
            //Mapp.custConnected = false; 
          //  var res = confirm("인바운드전화가 왔습니다.\n tel = "+Mapp.tel+"\nQueue = "+Mapp.queue);
            if(QueryString.isPB) sendCallInfo();
            else CAPI.sendEvt('@Call',{Mode:CAPI.mode,State:CAPI.state,Cid:Mapp.tel,Queue:Mapp.queue});
            if(document.getElementById('auto-answer').checked){
              setTimeout("answer()",1000);
            } 
            break;
          case 'Dial':
            //if(Mapp.regCallId){
            //    Ext.getCmp('reg_call-grid').fireEvent('proc-reg-call',Mapp.regCallId);
            //}
            //Mapp.last_call_type = 'Outbound';
            disableModeButtonsEx(null,true);
            disableCallButtonsEx(['Hangup'],false);             
            if(QueryString.isPB) sendCallInfo();
            else CAPI.sendEvt('@Call',{Mode:CAPI.mode,State:CAPI.state,Cid:Mapp.tel});
            //Mapp.Crm.log('아웃바운드:링:Dial:');           
            //Mapp.custConnected = false;
            //Mapp.lastCall = {
            //  call_type: CAPI.mode,
            //  uid: CAPI.uid, 
            //  tel: Mapp.cust_tel  
            //};
            break;
          case 'Connect':            
            if(CAPI.role==='a'){
              disableModeButtonsEx(['Hold'],false);
              disableCallButtonsEx(['Hangup','Transfer','IvrSsn','IvrAcc','IvrRet'],false);
              setSession('Init');
              //Mapp.custConnected = true;
            }else{
              disableModeButtonsEx(null,true);
              disableCallButtonsEx(['Hangup'],false);
            }
            //Mapp.lastCall = {
            //  call_type: CAPI.mode,
            //  uid: CAPI.uid, 
            //  tel: Mapp.cust_tel  
            //};
            //Mapp.Crm.checkRegCall(Mapp.phone_num); //예약콜
            //if(CAPI.mode === 'Inbound') addGlobalOneTime('hangup',Mapp.Crm.procInboundHangup,null,{single:true,delay:50}); 
            if(QueryString.isPB) sendCallInfo();
            else CAPI.sendEvt('@Call',{Mode:CAPI.mode,State:CAPI.state,Cid:Mapp.tel});
            break;
          case 'TxDial': //only for [A]
            disableModeButtonsEx(null,true);
            disableCallButtonsEx(['Hangup'],false);
            break;
          case 'TxRing': //only for [T]
            disableModeButtonsEx(null,true);
            disableCallButtonsEx(['Hangup','Answer'],false);
            //Ext.defer(checkAutoAnswer,500);
            break; 
          case 'TxWait': //only for [C] waiting for transfer.
            disableModeButtonsEx(null,true);
            disableCallButtonsEx(['Hangup'],false);
            break;   
          case 'TxConnect':
            if(CAPI.role==='a'){
              disableModeButtonsEx(['Hold'],true);
              disableCallButtonsEx(['TxComplete','TxCancel','Tx3Connect'],false);
            }else if(CAPI.role==='t'){
              disableModeButtonsEx(null,true);
              disableCallButtonsEx(['Hangup'],false);
            }
            break;
          case 'Tx3Connect':   
            if(CAPI.role==='a'){
              disableModeButtonsEx(['Hold'],true);
              disableCallButtonsEx(['TxComplete','TxCancel'],false);
            }else if(CAPI.role==='c'){
              disableModeButtonsEx(null,true);
              disableCallButtonsEx(['Hangup'],false);
            }else if(CAPI.role==='t'){
              disableModeButtonsEx(null,true);
              disableCallButtonsEx(['Hangup'],false);
            }
            break;
          case 'TxComplete': //TODO 
            //alert("TODO: TxComplete 상태... 어떻하지???");
            if(QueryString.isPB) sendCallInfo();
            else CAPI.sendEvt('@Call',{Mode:CAPI.mode,State:CAPI.state,Cid:Mapp.tel});
            break; 
        }//switch(state)
        
      }
      //CAPI.sendEvt('@Button',getButtonStates());
      setTimeout((function(typ,sts){
        CAPI.sendEvt(typ,sts);
      }).bind(null,'@Button',getButtonStates())
      ,200); 

      if(sub){
        switch(sub){
          case 'QueuePause':
              //Ext.Msg.show({
              //    title: '비대기중',
              //    message: '전화를 받지않아, 비대기상태로 전환했습니다.<br>대기하시려면 [확인]을 누르세요.',
              //    buttons: Ext.Msg.YES,
              //    icon: Ext.Msg.WARNING,
              //    fn: function(){ 
              //        console.log('비대기-->대기!!!!'); 
              //        notReady();
              //    }
              //}); 
              break;
              
          case 'QueueDrop':
              //Ext.Msg.show({
              //    title: '고객포기',
              //    message: '인바운드 연결 중 고객이 전화를 끊었습니다.',
              //    buttons: Ext.Msg.YES,
              //    icon: Ext.Msg.WARNING
              //}); 
              //Ext.defer(function(){ Ext.Msg.close(); },1500);
              break;
              
          case 'QueueReject':
              //Ext.Msg.show({
              //    title: '비대기(거부)중',
              //    message: '인바운드 콜을 거부(reject) 중 입니다.',
              //    buttons: Ext.Msg.YES,
              //    icon: Ext.Msg.WARNING,
              //    fn: function(){ 
              //        console.log('비대기-->대기!!!!'); 
              //        notReady();
              //    }
              //});  
              break;
              
          case 'DialCancel':
              //Ext.defer(function(){
              //    //Mapp.Crm.hasConn = false;
              //    notReady();
              //    //Mapp.Crm.hasConn = true;
              //    //Ext.getCmp('cons-save-tbar').enable();
              //},100);
              if(QueryString.isPB) sendCallHangup();
              else CAPI.sendEvt('@Call',{Mode:CAPI.mode,State:CAPI.state,Cid:Mapp.tel});
              break; 
              
          case 'AHangup': 
              if(QueryString.isPB) sendCallHangup();
              else CAPI.sendEvt('@Call',{Mode:CAPI.mode,State:CAPI.state,Cid:Mapp.tel});
              break;
              
          case 'CHangup': 
              if(QueryString.isPB) sendCallHangup();
              else CAPI.sendEvt('@Call',{Mode:CAPI.mode,State:CAPI.state,Cid:Mapp.tel});
              break;
        }
      }  
    }
    
    /*********************************************************
      CAPI: Call Control API's
    **********************************************************/
    function getState() {
    /***
    *[상담원상태]
    */
      CAPI.getState();
    }

    function login() {
    /***
    *[로그인]
    *  -- 상담원 로그인.
    */
      if(CAPI.mode!=='Logout'){
        alert('[경고] 이미 로그인한 상태입니다.');
        return false;
      }
      CAPI.login({
        initMode: QueryString.initMode||QueryString.initState||'Inbound',
        override: (QueryString.override=='true')
      });
      setTimeout("queueDivInit(CAPI)",1000);
    }

    function logout() {
    /***
    *[로그아웃]
    *  -- 상담원 로그아웃.
    */
      if(CAPI.mode==='Logout'){
        alert('[경고] 이미 로그아웃한 상태입니다.');
        return false;
      }
      CAPI.logout();
          if(QueryString.isPB){
        setTimeout(function(){
          window.location.href = window.location.href;
        },500);
          }
    }

    function ibMode() {
    /***
    *[IB모드] 
    */
      if(CAPI.mode!=='Inbound'){
        setMode('Inbound');
      } 
    }

    function obMode() {
    /***
    *[IB모드] 
    */
      if(CAPI.mode!=='Outbound'){
        setMode('Outbound');
      } 
    }

    function hangup() {
    /***
    *[전화끊기]
    *  -- 아웃바운드 통화중이면 콜이 끊어짐.
    *  -- 인바운드 통화중이면 콜이 끊어짐.
    *  -- 3자통화중이면 호전환 완료 후 끊어짐.
    *  -- 인바운드 ring중이면 거절이됨.
    */
      if(['Ring','Dial','TxDial','Connect','TxConnect','Tx3Connect'].indexOf(CAPI.state) >= 0){
        CAPI.hangup();
      }else{
        alert('[상태오류] 현재 통화중이 아닙니다.');
        return false;
      }
    }

    function answer(){
    /***
    *[전화받기]
    *  -- 인바운드 콜 받기.
    */
      if(CAPI.state!=='Ring'){
        //alert('전화 받기는 ring중에만 가능합니다.');
        return;
      }
      CAPI.answer();
    }

    function hold(){
    /***
    *[보류설정/보류해제]
    *  -- 보류 토글.
    */
      if(CAPI.state==='Hold'){
        //TODO: 보류 해제
      }else if(['Connect','TxConnect'].indexOf(CAPI.state) >= 0){ 
        //TODO: 보류 설정 
      }else{
        alert('보류 기능은 통화중에만 가능합니다.');
        return;
      } 
      var tt = mBtns['Hold'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['Hold'].innerHTML = tt[1]; 
      CAPI.hold();
    }
   
    function away(){
      var tt = mBtns['Away'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['Away'].innerHTML = tt[1]; 
      CAPI.away();
    }
    
    function rest(){
      var tt = mBtns['Rest'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['Rest'].innerHTML = tt[1];
      CAPI.rest();
    }
    
    function lunch(){
      var tt = mBtns['Lunch'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['Lunch'].innerHTML = tt[1];
      CAPI.lunch();
    }
    
    function meeting(){
      var tt = mBtns['Meeting'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['Meeting'].innerHTML = tt[1]; 
      CAPI.meeting();
    }
    
    function seminar(){
      var tt = mBtns['Seminar'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['Seminar'].innerHTML = tt[1]; 
      CAPI.seminar();
    }
    
    function etc(){
      var tt = mBtns['Etc'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['Etc'].innerHTML = tt[1]; 
      CAPI.etc();
    }
    
    function setMode(mode){
        /* mode: Inbound, Outbound, Campaign, Callback */
        return CAPI.setMode(mode);
    }
    
    function notReady(){
      var mode = CAPI.mode;
      if(['Away', 'Rest', 'Lunch', 'Meeting', 'Seminar', 'Etc'].indexOf(mode) > -1){        
        eval(mode.toLowerCase() +'()');
        return;
      }
      var tt = mBtns['NotReady'].innerHTML.match(/^(.+)\/해제$/);
      if(tt && tt.length===2) mBtns['NotReady'].innerHTML = tt[1]; 
      CAPI.notReady();
    }


    function dial() {
    /***
    *[전화걸기]
    */
      if(CAPI.state!=='Idle'){
        alert('[상태오류] 다이얼할 수 없는 상태입니다.');
        return false;
      }
      var testnum = prompt("고객 전화번호를 입력하세요.", getCookie('testnum'));
      if (testnum == null) {
         return;
      }else{
        setCookie('testnum',testnum,365);
      }
      //if( testnum.length >= 8 && !/^9/.test(testnum)){
      //  alert('외부발신은 9를 붙여야 합니다.');
      //  return false;
      //}
      //CAPI.dial(testnum);
 
      dialEx(testnum,{call_type: "Outbound"}); 
    }

 
    function dialEx(num,obj) {
        /***
         * [전화걸기]
         * Ex: 
         *    CAPI.dialEx('01033334444',{
         *      prefix    : '9', //외부발신 prefix
         *      cid       : '025224333',
         *      cust_id   : '20039204',
         *      call_type : 'Campaign', //필수
         *      typ_id    : '133' 
         *    });
         */ 
        num = num.replace(/\D/g,''); 
        obj = obj || {};  
        /*** [체크.1] 로그인 ***/
        if(CAPI.mode==='Logout'){
            alert('[상태오류] 소프트폰이 로그아웃 상태입니다.');
            return false;
        }  
        /*** [체크.2] Idle 상태 ***/
        if(CAPI.state !== 'Idle'){
            alert('[상태오류] 다이얼할 수 없는 상태입니다. (state='+CAPI.state+')');
            return false;
        }
        /*** [체크.3] 번호 ***/
        if(num.length < 3) {
            alert('[상태오류] 잘못된 번호입니다.');
            return;
        }    
        /*** [파라미터] 발신 call_type ***/
        if(['Outbound','Campaign','Callback'].indexOf(obj.call_type) < 0){
            //console.log('dialEx:WARN: rejct dialEx, obj.call_type='+obj.call_type);
            //return false;
            obj.call_type = 'Outbound';
        } 
        
        if(CAPI.mode !== obj.call_type){  
          //CAPI.mode: 'Inbound', 'NotReady','Hold','Away','Rest','Lunch','Meeting','Seminar','Etc'
          //           또는 Outbound 상태에서 Campaign콜 하는 등...
          var _modeChange = (function(n,o,m){
            // n:번호, o:obj, m:현재모드
            //(1) obj.call_type 으로 mode 변경 후 다이얼.
            console.log('dialEx: modeChange event');
            if(CAPI.mode!==o.call_type){
              console.log('event:modeChange: fail to change mode.. wanted='+o.call_type+',real='+CAPI.mode);
              return;
            } 
            
            var _consSave = (function(md){ 
                //(2) 통화 종료 후 결과저장 창(modal) //Inbound가 아니므로 state=Idle로 그냥둠!!
                console.log('dialEx: hangup event.. 결과창 보이기 ['+md+']'); 
                //~Mapp.Crm.fillConsSaveWnd();  
                //~Mapp.ConsWnd.show(); 
                console.log("[_consSave]TODO:1: \n(1)상담저장 윈도우 보여주고.. \n(2)닫으면 \"evtConsWndHidden\" 이벤트..");
                
                Event.once('evtConsWndHidden',function(){  
                  console.log('dialEx: ConsWnd hidden.. restore previous mode ['+md+']');
                  //~Mapp.setCustFldsAndResFlds(md); //(3) 다시 원복! 
                }); 
        
            }).bind(this,m);
            Event.once('hangup',_consSave);                             
            CAPI.dialEx(n,o);          
            
          }).bind(this,num,obj,CAPI.mode);
          Event.once('modeChange',_modeChange);
          
          //~Mapp.setCustFldsAndResFlds(obj.call_type);
           
          setMode(obj.call_type);
          return;
        }
        else
        { 
          var _consSave = function(){  
              //~Mapp.Crm.fillConsSaveWnd(null); //beforehide event 에서 call됨.
              //~Mapp.ConsWnd.show(); 
              console.log('[_consSave]TODO:2: 상담저장 윈도우');
          };
          Event.once('hangup',_consSave);         
        } 
        CAPI.dialEx(num,obj);
    }

     
    function hijack(){
    /***
    *[당겨받기]
    *  -- 인바운드 콜 당겨받기.
    */
    }
    
    function transfer(){
    /***
    *[호전환]
     *  -- 고객의 콜은 대기상태가 되고, 상담원은 2차상담원과 연결 시도됨.
     *  -- 상담원이 언제 콜을 끊냐에 따라 Blind 또는 Attended 가됨.
     *    -- Blind: 호전환 다이얼 후 ring중에 끊으면 Blind Transfer가됨.
     *    -- Attended: 호전환 다이얼 후 통화가 연결될 때까지 있으면 Attended Tranfer가됨.
     *
     *  -- 2차상담원과 통화연결 후 ..
     *     -- txCancel을 하면 고객과 다시 통화 연결됨.
     *     -- txComplete를 하면 고객과 2차상담원의 콜이 연결되고 상담원은 끊어짐(완료).
     *     -- tx3Connect를 하면 상담원, 고객, 2차상담원 세 명의 콜이 연결됨.
     *     -- tranferf를 다시 호출하면 다른 2차상담원과 연결 시도됨.
     *
     *  -- 3자통화연결 후..
     *     -- txCancel을 하면 2차상담원의 콜이 끊어지고 고객과 다시 통화 연결됨.
     *     -- txComplete(또는 hangup)를 하면 고객과 2차상담원의 콜이 연결되고 상담원은 끊어짐(완료).
    */
      if(['Connect','TxConnect'].indexOf(CAPI.state) < 0){
        alert('호전환은 통화중에만 가능합니다.');
        return;
      }
      var txNumber = prompt("[발신테스트] 고객 전화번호를 입력하세요.", getCookie('txNumber'));
      if (txNumber === null) {
         return;
      }else{
        setCookie('txNumber',txNumber,365);
      }
      //if( txNumber.length >= 8 && !/^9/.test(txNumber)){
      //  alert('외부발신은 9를 붙여야 합니다.');
      //  return false;
      //}
      CAPI.transfer(txNumber);
    }
    
    function txCancel(){
    /***
    *[전환취소]
    *  -- 다음의 세 상태 중에 전환취소를 하면 다시 고객과 통화 연결됨.
    *    -- 호전환 링 중
    *    -- 2차상담원과 통화 중
    *    -- 3자통화 중 
    */
      if(CAPI.state==='TxDial'||CAPI.state==='TxConnect'){
        CAPI.txCancel();
      }else{
        alert('호전환 시도중이 아닙니다.');
        return;
      }
    }
    
    function txComplete(){
    /***
    *[전환완료]
    */
      if(CAPI.state==='TxConnect'||CAPI.state==='Tx3Connect'){
        CAPI.txComplete();
      }else{
        alert('호전환중이 아닙니다.');
        return;
      }
    }
    
    function tx3Connect(){
    /***
    *[3자통화]
    *  -- 고객, 상담원(본인), 2차상담원이 동시에 연결됨.
    */
      if(CAPI.state==='TxConnect'){
        CAPI.tx3Connect();
      }else{
        alert('호전환중이 아닙니다.');
        return;
      }
    }
    

    function getTeamAgents(){
    /***
    *[팀멤버가져오기]
    *  -- 팀원 리스트와 상태를 가져옴.
    */
    }
    
    function getGroupAgents(){
    /***
    *[그룹멤버가져오기]
    *  -- 그룹멤버 리스트와 상태를 가져옴.
    */
    }
    
    function getCenterAgents(){
    /***
    *[센터멤버가져오기]
    *  -- 센터멤버 리스트와 상태를 가져옴.
    */
    }

    function getRecentCallInfo(){
      var url = "http://"+location.hostname+"/call_logs/dummy?user_id="+CAPI.userid+"&cmd=getRecent";
      doAjax(url,function(res){
        var rr = JSON.parse(res);
        if(rr && rr.id){
          CAPI.sendEvt('@CallInfo',rr); // EX: @CallInfo!id:123^uid:100-1455697945.49^call_type:Outbound^..     
        }else{
          CAPI.sendEvt('@CallInfo',{id:'none'}); // EX: @CallInfo!id:none
          console.log(res);
        }
      });
    }    

    function sendCallInfo(){
      var url = "http://"+location.hostname+"/call_logs/dummy?uid="+CAPI.uid+"&cmd=getCallInfo";
      doAjax(url,function(res){
        var rr = JSON.parse(res);
        if(rr && rr.id){
          rr.Mode  = CAPI.mode;
          rr.State = CAPI.state;
          rr.Cid   = Mapp.tel;          
          CAPI.sendEvt('@Call',rr); // EX: @Call!Mode:Inbound^State:Ring^Cid:0102223333^id:123^uid:100-1455697945.49^call_type:Outbound^..     
        }else{
          CAPI.sendEvt('@Call',{id:'none'}); // EX: @Call!id:none
          console.log(res);
        }
      });
    }

    function sendCallHangup(){
      var uid = CAPI.uid;
console.log('[sendCallHangup.1]',uid);      
      if(hangupCalls.indexOf(uid)>-1) return;
console.log('[sendCallHangup.2]',uid);
      var url = "http://"+location.hostname+"/call_logs/dummy?uid="+uid+"&cmd=getCallInfo";
      hangupCalls = [ uid ];
      doAjax(url,function(res){
        var rr = JSON.parse(res);
        if(rr && rr.id){
          rr.Mode  = CAPI.mode;
          rr.State = CAPI.state;
          rr.Cid   = Mapp.tel; 
          rr.is_end = true; //CHECK: forced to 1.
console.log('[sendCallHangup.3]is_end=',rr.is_end);
          CAPI.sendEvt('@Call',rr); // EX: @Call!Mode:Inbound^State:Ring^Cid:0102223333^id:123^uid:100-1455697945.49^call_type:Outbound^..     
        }else{
          CAPI.sendEvt('@Call',{id:'none'}); // EX: @Call!id:none
          console.log(res);
        }
      });
    } 

/*  function vbEvent(){
          var tt = document.getElementById('vb2js').value;
          if(tt==='open') onOpen();
          else if(tt==='close') onClose();        
          else if(tt==='error') onError();                
          else onMessage(tt);
    } */   

    function vbEvent(){
          var tt = document.getElementById('vb2js').value;
          eval(tt);
    }
    
        if(typeof Mapp==='undefined') Mapp = {};
        if(typeof Mapp.Crm==='undefined') Mapp.Crm = {};
        Mapp.Crm.forceLogout = function(){
                console.log('Forced to Logout!');
            logout();
        };

        Mapp.Crm.tryLoginAfter = function(msec){
                console.log('Retry Login..');
            if(typeof msec==='undefined'||!msec){ msec = 1000; };
                setTimeout(function(){
                  login();
                },msec);
        };

  /***************************************************************************/
  /***** IVR 호전환 기능 ***/ 
   
  function setSession(session){ 
    //session: none: Connect아닐때, init: Connect됐을때, ssn: IVR get-SSN, account; IVR get-Account
    var nn = document.getElementById('session');
    var rr = document.getElementById('IvrRet');
    var ss = document.getElementById('IvrSsn');
    var aa = document.getElementById('IvrAcc');
    nn.innerText = session; 
    switch(session){
    case 'Init':
      rr.disabled = true; ss.disabled = false; aa.disabled = false;
      break;
    case 'Ssn':
      rr.disabled = false; ss.disabled = true; aa.disabled = true;
      break;
    case 'Account':
      rr.disabled = false; ss.disabled = true; aa.disabled = true;
      break;
    default:
      rr.disabled = true; ss.disabled = true; aa.disabled = true;
    }
  }
  
  function ivrSsn(){ 
    setSession('Ssn');
    Event.once('ivrTxComplete',function(typ,res,val){  
      console.log('ivrTxComplete: type/res/val = ',typ,res,val); 
      setSession('Init');
    });
    CAPI.genAction(
      'Redirect',{
        Channel: CAPI.cchan, 
        Context: 'IvrGetInput', 
        Exten: CAPI.cphone+'^ssn^get-ssn^13^13^3', 
        Priority: 1 
    });
  }
  
  function ivrAccount(){
    setSession('Account'); 
    Event.once('ivrTxComplete',function(typ,res,val){  
      console.log('ivrTxComplete: type/res/val = ',typ,res,val); 
      setSession('Init');
    });
    CAPI.genAction(
      'Redirect',{
        Channel: CAPI.cchan, 
        Context: 'IvrGetInput', 
        Exten: CAPI.cphone+'^account^get-account^11^14^3', 
        Priority: 1 
    });    
  }
     
  function ivrReturn(){
    setSession('Init');
    CAPI.genAction(
      'Redirect',{
        Channel: CAPI.cchan, 
        Context: 'IvrGetInput', 
        Exten: 'ret', 
        Priority: 1 
    });  
  }
  </script>
  
</HEAD>

<BODY id='body' leftmargin="5" topmargin="5" style="background-color:#F5F5F5" OnLoad="WindowLoad()" OnUnload="WindowClose()">

  
 <button id='Login'      onclick="EE('login')">    로그인   </button> 
 <button id='Logout'     onclick="EE('logout')">   로그아웃 </button>
 <button id='NotReady'   onclick="EE('notReady')"> NotReady </button>
 <button id='Inbound'    onclick="EE('ibMode')">   IB모드 </button>
 <button id='Outbound'   onclick="EE('obMode')">   OB모드 </button>
 <br/>
 <br/> 
 
  
 <hr>
 <button id='Dial'       onclick="EE('dial')">      다이얼   </button> 
 <button id='Hangup'     onclick="EE('hangup')">    끊기/거절</button>
 <br/>
 
 <hr>
 <button id='Answer'     onclick="EE('answer')">    전화받기 </button>  
 <button id='Hijack'     onclick="EE('hijack')">    당겨받기 </button>
 <br/>
 
 <hr>
 <button id="Transfer"   onclick="EE('transfer')">   호전환   </button>
 <button id="TxComplete" onclick="EE('txComplete')"> 전환완료 </button>
 <button id="TxCancel"   onclick="EE('txCancel')">   전환취소 </button>
 <button id="Tx3Connect" onclick="EE('tx3Connect')"> 3자통화  </button>
 <br/>
 
 <hr>
 <button id="Hold"      onclick="EE('hold')">      홀드      </button>
 <button id="Away"      onclick="EE('away')">      자리비움  </button>
 <button id="Rest"      onclick="EE('rest')">      휴식      </button>
 <button id="Lunch"     onclick="EE('lunch')">     식사      </button>
 <button id="Meeting"   onclick="EE('meeting')">   회의      </button>
 <button id="Seminar"   onclick="EE('seminar')">   교육      </button>
 <button id="Etc"       onclick="EE('etc')">       기타      </button>
 <button id='GetState'  onclick="EE('getState')" style="display:none"> 상태체크 </button> 
 <br/>
   
 <button onclick="EE('getTeamAgents')" style="display:none">    팀멤버   </button>
 <button onclick="EE('getGroupAgents')" style="display:none">   그룹멤버 </button>
 <button onclick="EE('getCenterAgents')" style="display:none">  전체멤버 </button>

 
 <button id='QueueAdd'    onclick="EE('queueAdd')" style="display:none">  큐로그인   </button> 
 <button id='QueueSub'    onclick="EE('queueSub')" style="display:none">  큐로그아웃 </button> 
 <button id='QueueRun'    onclick="EE('queueRun')" style="display:none">   큐활성화   </button> 
 <button id='QueuePause'  onclick="EE('queuePause')" style="display:none"> 큐비활성화   </button>
 <button id='QueueState'  onclick="EE('queueState')" style="display:none">  큐상태체크 </button> 

 <hr>
 <button id='IvrSsn'  onclick="EE('ivrSsn')"    > 주민번호받기 </button> 
 <button id='IvrAcc'  onclick="EE('ivrAccount')"> 계좌번호받기 </button>
 <button id='IvrRet'  onclick="EE('ivrReturn')" > IVR전환취소  </button> 
 <br/> 
 
 <hr>
 <label><input type='checkbox' id='auto-answer'>자동받기</input></label>
 <br/> 
 <br/> 
   
 <input id='js2vb' size="100">  VB로 명령/메시지 전달 </input> <br>  
 <input id='vb2js' size="100" onchange="vbEvent()">  VB에서 메시지 받음 </input> 
 <div id='custEv' style='display:none'></div> 
  
 <div id='queue-div'>
 </div>
 
 <div style='position:fixed;top:5px;right:5px;height:100;width:400;border:1px solid green;'>
  <table style="width:480px;text-align:center" border="1px">
     <tr>
      <th>상담원</th>
      <th>전화기</th>
      <th>모드</th>
      <th>상태</th> 
      <th>세션</th> 
      <th>갱신</th> 
      <th>호타입</th> 
     </tr>
    <tr>
      <td style='color:blue' onclick='changeAgent()' id='userid'>2117250</td> 
      <td style='color:blue' onclick='changePhone()' id='phone'>63620</td> 
      <td id='mode'>Logout</td> 
      <td id='state'>Idle</td> 
      <td id='session'>None</td> 
      <td id='time'>00:00:00</td>
      <td id='call_type'>Idle</td>
     </tr>
  </table> 
 </div>
  
 <!-- ########################################## -->
  
 <SCRIPT language='Javascript' for='NCapi' event='EventOpen'>
   onOpen();
 </SCRIPT>
 
 <SCRIPT language='Javascript' for='NCapi' event='EventClose'>
   onClose();
 </SCRIPT>
 
 <SCRIPT language='Javascript' for='NCapi' event='EventError'>
   onError();
 </SCRIPT>
 
 <SCRIPT language='Javascript' for='NCapi' event='EventMessage(msg)'>
   onMessage(msg);
 </SCRIPT>
 
 <SCRIPT language='Javascript' for='NCapi' event='EventLog'>
   onLog(log);
 </SCRIPT>
 
</BODY>

</HTML>